plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "maven-publish"
}

group = maven_group

allprojects {
    apply plugin: "java"

    version = mod_version

    java {
        withSourcesJar()
    }

    repositories {
        mavenCentral()
        maven {
            name = "Fabric"
            url = "https://maven.fabricmc.net/"
        }
        maven {
            name = "Babric"
            url = "https://maven.glass-launcher.net/babric"
        }
        maven { url "https://jitpack.io/" }
    }

    dependencies {
        annotationProcessor "com.github.bsideup.jabel:jabel-javac-plugin:${jabel_version}"
        compileOnly "com.github.bsideup.jabel:jabel-javac-plugin:${jabel_version}"
    }

    tasks.withType(JavaCompile).configureEach {
        if (it.name in ["compileMcLauncherJava", "compilePatchedMcJava"]) {
            return
        }

        it.options.encoding = "UTF-8"

        it.sourceCompatibility = 17 // for the IDE support
        it.options.release = 8

        it.javaCompiler = javaToolchains.compilerFor {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }
}

subprojects {
    archivesBaseName = rootProject.archives_base_name + "-" + project.name
    group = rootProject.maven_group + "." + archivesBaseName
}

configurations {
    shade
    compileClasspath.extendsFrom shade
    runtimeClasspath.extendsFrom shade
    developmentFabric.extendsFrom shade

    shadeExternal
    compileClasspath.extendsFrom shadeExternal
    runtimeClasspath.extendsFrom shadeExternal
    developmentFabric.extendsFrom shadeExternal
}

dependencies {
    implementation "net.fabricmc:fabric-loader:${loader_version}"

    shadeExternal(implementation("blue.endless:jankson:${jankson_version}"))

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    compileOnly "org.apache.logging.log4j:log4j-core:2.22.0"

    shade(project(":common")) { transitive false }
    shade(project(":modern")) { transitive false }
    shade(project(":primitive")) { transitive false }
    shade(project(":legacy")) { transitive false }
}

java {
    archivesBaseName = archives_base_name
}

shadowJar {
    from("LICENSE") {
        rename { "${it}_${archives_base_name}"}
    }

    configurations = [project.configurations.shade,
                      project.configurations.shadeExternal]
    archiveClassifier = ""

    relocate "blue.endless.jankson", "dev.nolij.zume.shadow.blue.endless.jankson"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }

    def modernSources = project(":modern").sourcesJar
    dependsOn modernSources
    from(modernSources.archiveFile.map { zipTree(it) }) { exclude "fabric.mod.json" }

    def primitiveSources = project(":primitive").sourcesJar
    dependsOn primitiveSources
    from(primitiveSources.archiveFile.map { zipTree(it) }) { exclude "fabric.mod.json" }

    def legacySources = project(":legacy").sourcesJar
    dependsOn legacySources
    from(legacySources.archiveFile.map { zipTree(it) }) { exclude "fabric.mod.json" }
}

build.dependsOn(shadowJar)

processResources {
    inputs.property "version", version
    inputs.property "loader_version", loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": version,
                "loader_version": loader_version
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
    }
}
