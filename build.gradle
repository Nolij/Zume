plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "maven-publish"
}

group = maven_group

allprojects {
    apply plugin: "java"

    version = mod_version

    java {
        withSourcesJar()
    }

    repositories {
        mavenCentral()
        maven {
            name = "Fabric"
            url = "https://maven.fabricmc.net/"
        }
        maven {
            name = "Babric"
            url = "https://maven.glass-launcher.net/babric"
        }
        maven { url "https://jitpack.io/" }
    }

    dependencies {
        annotationProcessor "com.github.bsideup.jabel:jabel-javac-plugin:${jabel_version}"
        compileOnly "com.github.bsideup.jabel:jabel-javac-plugin:${jabel_version}"
    }

    tasks.withType(JavaCompile).configureEach {
        if (it.name in ["compileMcLauncherJava", "compilePatchedMcJava"]) {
            return
        }

        it.options.encoding = "UTF-8"

        it.sourceCompatibility = 17 // for the IDE support
        it.options.release = 8

        it.javaCompiler = javaToolchains.compilerFor {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }
}

subprojects {
    archivesBaseName = rootProject.archives_base_name + "-" + project.name
    group = rootProject.maven_group + "." + archivesBaseName
}

configurations {
    shade
    compileClasspath.extendsFrom shade
    runtimeClasspath.extendsFrom shade
    developmentFabric.extendsFrom shade
}

def fabricImpls = [project(":modern"), project(":primitive"), project(":legacy")]
def legacyForgeImpls = [project(":legacyforge"), project(":archaic"), project(":vintage")]
def impls = [project(":common"), *fabricImpls, *legacyForgeImpls]

dependencies {
    compileOnly "net.fabricmc:fabric-loader:${loader_version}"
	
    shade(implementation("blue.endless:jankson:${jankson_version}"))

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    compileOnly "org.apache.logging.log4j:log4j-core:2.22.0"

	impls.forEach {
		shade(it) { transitive false }
	}
}

java {
    archivesBaseName = archives_base_name
}

shadowJar {
    from("LICENSE") {
        rename { "${it}_${archives_base_name}"}
    }

    configurations = [project.configurations.shade]
    archiveClassifier = ""
	
	legacyForgeImpls.forEach {
		it.afterEvaluate {
			def reobfJar = it.reobfJar
			dependsOn reobfJar
			from zipTree(reobfJar.archivePath)
		}
	}

    relocate "blue.endless.jankson", "dev.nolij.zume.shadow.blue.endless.jankson"
    
    manifest {
        attributes (
            "FMLCorePluginContainsFMLMod": true,
            "ForceLoadAsMod": true,
            "FMLCorePlugin": "dev.nolij.zume.legacyforge.LegacyForgeZumeBootstrapper",
	        "MixinConfigs": "zume-legacyforge.mixins.json",
	        "TweakClass": "org.spongepowered.asm.launch.MixinTweaker"
        )
    }
}

sourcesJar {
	impls.forEach {
		def sourcesJarTask = it.sourcesJar
		dependsOn sourcesJarTask
		from(sourcesJarTask.archiveFile.map { zipTree(it) }) { exclude "fabric.mod.json", "mcmod.info" }
	}
}

build.dependsOn(shadowJar)

processResources {
	from "common/src/main/resources"
	from "legacyforge/src/main/resources"
	
    inputs.property "version", version
    inputs.property "loader_version", loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand  "version": version,
                "loader_version": loader_version
    }
	
    filesMatching("mcmod.info") {
        expand  "mod_version": version,
	            "minecraft_version": archaic_minecraft_version
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
    }
}
